<?xml version="1.0" encoding="UTF-8" ?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with 
	this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the 
	"License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
	Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
	WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations 
	under the License. -->

<schema name="example" version="1.5">
	<!-- If you remove this field, you must _also_ disable the update log in solrconfig.xml or Solr won't start. _version_ and update log are required
		for SolrCloud -->
	<field name="_version_" type="long" indexed="true" stored="true" />

	<!-- points to the root document of a block of nested documents. Required for nested document support, may be removed otherwise -->
	<field name="_root_" type="string" indexed="true" stored="false" />

	<!-- Only remove the "id" field if you have a very good reason to. While not strictly required, it is highly recommended. A <uniqueKey> is present 
		in almost all Solr installations. See the <uniqueKey> declaration below where <uniqueKey> is set to "id". -->
	<field name="id" type="string" indexed="true" stored="true" required="true" multiValued="false" />
	
	<field name="gid" type="int" indexed="true" stored="true" multiValued="false" />
	<field name="study_id" type="int" indexed="true" stored="true" multiValued="false" />
	<field name="study" type="int" indexed="true" stored="true" multiValued="false" />
	<field name="first_author" type="text_general" indexed="true" stored="true" multiValued="false" />
	<field name="publication" type="text_general" indexed="true" stored="true" multiValued="false" />
	<field name="title" type="text_general" indexed="true" stored="true" multiValued="false" />
	<field name="snp" type="string" indexed="true" stored="true" multiValued="false" />
	<field name="disease_trait" type="text_general" indexed="true" stored="true" multiValued="false" />
    <field name="disease_trait_str" type="string" indexed="true" stored="false" multiValued="false" />
	<!--<field name="p_value" type="double" indexed="true" stored="true" multiValued="false" />-->

	<field name="efo_uri" type="string" indexed="true" stored="true" multiValued="false" />

    <!-- Full child hierarchy, represented in JSON -->
    <field name="child_hierarchy" type="string" indexed="false" stored="true" />

	<!-- catchall field, containing all other searchable text fields (implemented via copyField further on in this schema -->
	<field name="text" type="text_general" indexed="true" stored="false" multiValued="true" />

    <!-- Dynamic field(s) for storing strings -->
    <dynamicField name="*_s" type="string" indexed="true" stored="true" multiValued="true" />
    <!-- Dynamic field(s) for storing tokenized text -->
    <dynamicField name="*_t" type="text_general" indexed="true" stored="true" multiValued="true" />

	<!-- Field to use to determine and enforce document uniqueness. Unless this field is marked with required="false", it will be a required field -->
	<uniqueKey>id</uniqueKey>
	
	<copyField source="disease_trait" dest="disease_trait_str" />

	<!-- field type definitions. The "name" attribute is just a label to be used by field definitions. The "class" attribute and any other attributes 
		determine the real behavior of the fieldType. Class names starting with "solr" refer to java classes in a standard package such as org.apache.solr.analysis -->

	<!-- The StrField type is not analyzed, but indexed/stored verbatim. It supports doc values but in that case the field needs to be single-valued 
		and either required or have a default value. -->
	<fieldType name="string" class="solr.StrField" sortMissingLast="true" />

	<!-- boolean type: "true" or "false" -->
	<fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" />

	<!-- sortMissingLast and sortMissingFirst attributes are optional attributes are currently supported on types that are sorted internally as 
		strings and on numeric types. This includes "string","boolean", and, as of 3.5 (and 4.x), int, float, long, date, double, including the "Trie" 
		variants. - If sortMissingLast="true", then a sort on this field will cause documents without the field to come after documents with the field, 
		regardless of the requested sort order (asc or desc). - If sortMissingFirst="true", then a sort on this field will cause documents without the 
		field to come before documents with the field, regardless of the requested sort order. - If sortMissingLast="false" and sortMissingFirst="false" 
		(the default), then default lucene sorting will be used which places docs without the field first in an ascending sort and last in a descending 
		sort. -->

	<!-- Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types. These fields support doc values, but 
		they require the field to be single-valued and either be required or have a default value. -->
	<fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0" />
	<fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0" />
	<fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0" />
	<fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0" />

	<!-- Numeric field types that index each value at various levels of precision to accelerate range queries when the number of values between 
		the range endpoints is large. See the javadoc for NumericRangeQuery for internal implementation details. Smaller precisionStep values (specified 
		in bits) will lead to more tokens indexed per value, slightly larger index size, and faster range queries. A precisionStep of 0 disables indexing 
		at different precision levels. -->
	<fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0" />
	<fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0" />
	<fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0" />
	<fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0" />

	<!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and is a more restricted form of the canonical representation of dateTime 
		http://www.w3.org/TR/xmlschema-2/#dateTime The trailing "Z" designates UTC time and is mandatory. Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z 
		All other components are mandatory. Expressions can also be used to denote calculations that should be performed relative to "NOW" to determine 
		the value, ie... NOW/HOUR ... Round to the start of the current hour NOW-1DAY ... Exactly 1 day prior to now NOW/DAY+6MONTHS+3DAYS ... 6 months 
		and 3 days in the future from the start of the current day Consult the DateField javadocs for more information. Note: For faster range queries, 
		consider the tdate type -->
	<fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0" />

	<!-- A Trie based date field for faster date range queries and date faceting. -->
	<fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0" />


	<!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
	<fieldtype name="binary" class="solr.BinaryField" />

	<!-- The "RandomSortField" is not used to store or search any data. You can declare fields of this type it in your schema to generate pseudo-random 
		orderings of your docs for sorting or function purposes. The ordering is generated based on the field name and the version of the index. As long 
		as the index version remains unchanged, and the same field name is reused, the ordering of the docs will be consistent. If you want different 
		psuedo-random orderings of documents, for the same version of the index, use a dynamicField and change the field name in the request. -->
	<fieldType name="random" class="solr.RandomSortField" indexed="true" />

	<!-- solr.TextField allows the specification of custom text analyzers specified as a tokenizer and a list of token filters. Different analyzers 
		may be specified for indexing and querying. The optional positionIncrementGap puts space between multiple fields of this type on the same document, 
		with the purpose of preventing false phrase matching across fields. For more info on customizing your analyzer chain, please see http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters -->

	<!-- One can also specify an existing Analyzer class that has a default constructor via the class attribute on the analyzer element. Example: 
		<fieldType name="text_greek" class="solr.TextField"> <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/> </fieldType> -->

	<!-- A text field that only splits on whitespace for exact matching of words -->
	<fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
			<tokenizer class="solr.WhitespaceTokenizerFactory" />
		</analyzer>
	</fieldType>

	<!-- A general text field that has reasonable, generic cross-language defaults: it tokenizes with StandardTokenizer,
		 and down cases. -->
	<fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
		<analyzer type="index">
			<tokenizer class="solr.StandardTokenizerFactory" />
			<filter class="solr.LowerCaseFilterFactory" />
		</analyzer>
		<analyzer type="query">
			<tokenizer class="solr.StandardTokenizerFactory" />
			<filter class="solr.LowerCaseFilterFactory" />
		</analyzer>
	</fieldType>

</schema>
